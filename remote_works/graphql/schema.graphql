schema {
  query: Query
  mutation: Mutations
}

type Address implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  companyName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  cityArea: String!
  postalCode: String!
  country: CountryDisplay!
  countryArea: String!
  phone: String
}

type AddressCreate {
  errors: [Error!]
  address: Address
}

input AddressCreateInput {
  firstName: String
  lastName: String
  companyName: String
  streetAddress1: String
  streetAddress2: String
  city: String
  cityArea: String
  postalCode: String
  country: String!
  countryArea: String
  phone: String
  userId: ID!
}

type AddressDelete {
  errors: [Error!]
  address: Address
}

input AddressInput {
  firstName: String
  lastName: String
  companyName: String
  streetAddress1: String
  streetAddress2: String
  city: String
  cityArea: String
  postalCode: String
  country: String!
  countryArea: String
  phone: String
}

enum AddressTypeEnum {
  BILLING
  DELIVERY
}

type AddressUpdate {
  errors: [Error!]
  address: Address
}

type AddressValidationData {
  countryCode: String
  countryName: String
  addressFormat: String
  addressLatinFormat: String
  allowedFields: [String]
  requiredFields: [String]
  upperFields: [String]
  countryAreaType: String
  countryAreaChoices: [ChoiceValue]
  cityType: String
  cityAreaChoices: [ChoiceValue]
  postalCodeType: String
  postalCodeMatchers: [String]
  postalCodeExamples: [String]
  postalCodePrefix: String
}

input AddressValidationInput {
  countryCode: String
  countryArea: String
  cityArea: String
}

type AssignNavigation {
  errors: [Error!]
  menu: Menu
}

type Attribute implements Node {
  id: ID!
  slug: String
  name: String
  skillType: SkillType
  skillVariantType: SkillType
  values: [AttributeValue]
  translation(languageCode: String!): AttributeTranslation
}

type AttributeCountableConnection {
  pageInfo: PageInfo!
  edges: [AttributeCountableEdge!]!
  totalCount: Int
}

type AttributeCountableEdge {
  node: Attribute!
  cursor: String!
}

type AttributeCreate {
  errors: [Error!]
  attribute: Attribute
  skillType: SkillType
}

input AttributeCreateInput {
  name: String!
  values: [AttributeValueCreateInput]
}

type AttributeDelete {
  errors: [Error!]
  skillType: SkillType
  attribute: Attribute
}

scalar AttributeScalar

type AttributeTranslate {
  errors: [Error!]
  attribute: Attribute
}

type AttributeTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

enum AttributeTypeEnum {
  SKILL
  VARIANT
}

type AttributeUpdate {
  errors: [Error!]
  skillType: SkillType
  attribute: Attribute
}

input AttributeUpdateInput {
  name: String
  removeValues: [ID]
  addValues: [AttributeValueCreateInput]
}

type AttributeValue implements Node {
  id: ID!
  sortTask: Int!
  name: String
  value: String
  slug: String
  type: AttributeValueType
  translation(languageCode: String!): AttributeValueTranslation
}

type AttributeValueCreate {
  errors: [Error!]
  attribute: Attribute
  attributeValue: AttributeValue
}

input AttributeValueCreateInput {
  name: String!
  value: String
}

type AttributeValueDelete {
  errors: [Error!]
  attribute: Attribute
  attributeValue: AttributeValue
}

input AttributeValueInput {
  slug: String!
  value: String!
}

type AttributeValueTranslate {
  errors: [Error!]
  attributeValue: AttributeValue
}

type AttributeValueTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

enum AttributeValueType {
  COLOR
  GRADIENT
  URL
  STRING
}

type AttributeValueUpdate {
  errors: [Error!]
  attribute: Attribute
  attributeValue: AttributeValue
}

type AuthorizationKey {
  name: AuthorizationKeyType!
  key: String!
}

type AuthorizationKeyAdd {
  errors: [Error!]
  authorizationKey: AuthorizationKey
  shop: Shop
}

type AuthorizationKeyDelete {
  errors: [Error!]
  authorizationKey: AuthorizationKey
  shop: Shop
}

input AuthorizationKeyInput {
  key: String!
  password: String!
}

enum AuthorizationKeyType {
  FACEBOOK
  GOOGLE_OAUTH2
}

input CatalogueInput {
  skills: [ID]
  categories: [ID]
  collections: [ID]
}

type Category implements Node {
  seoTitle: String
  seoDescription: String
  id: ID!
  name: String!
  slug: String!
  description: String!
  descriptionJson: JSONString!
  parent: Category
  backgroundImage(size: Int): Image
  level: Int!
  children(before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  skills(before: String, after: String, first: Int, last: Int): SkillCountableConnection
  ancestors(before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  url: String
  translation(languageCode: String!): CategoryTranslation
}

type CategoryCountableConnection {
  pageInfo: PageInfo!
  edges: [CategoryCountableEdge!]!
  totalCount: Int
}

type CategoryCountableEdge {
  node: Category!
  cursor: String!
}

type CategoryCreate {
  errors: [Error!]
  category: Category
}

type CategoryDelete {
  errors: [Error!]
  category: Category
}

input CategoryInput {
  description: String
  descriptionJson: JSONString
  name: String
  slug: String
  seo: SeoInput
  backgroundImage: Upload
  backgroundImageAlt: String
}

type CategoryTranslate {
  errors: [Error!]
  category: Category
}

type CategoryTranslation implements Node {
  seoTitle: String
  seoDescription: String
  id: ID!
  name: String!
  description: String!
  descriptionJson: JSONString!
  language: LanguageDisplay!
}

type CategoryUpdate {
  errors: [Error!]
  category: Category
}

type Checkout implements Node {
  created: DateTime!
  lastChange: DateTime!
  user: User
  email: String!
  token: UUID!
  quantity: Int!
  billingAddress: Address
  deliveryAddress: Address
  deliveryMethod: DeliveryMethod
  note: String!
  discountAmount: Money
  discountName: String
  translatedDiscountName: String
  voucherCode: String
  lines: [CheckoutLine]
  id: ID!
  availableDeliveryMethods: [DeliveryMethod]!
  availablePaymentGateways: [GatewaysEnum]!
  isDeliveryRequired: Boolean!
  deliveryPrice: TaxedMoney
  subtotalPrice: TaxedMoney
  totalPrice: TaxedMoney
}

type CheckoutBillingAddressUpdate {
  errors: [Error!]
  checkout: Checkout
}

type CheckoutComplete {
  errors: [Error!]
  task: Task
}

type CheckoutCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!
  totalCount: Int
}

type CheckoutCountableEdge {
  node: Checkout!
  cursor: String!
}

type CheckoutCreate {
  errors: [Error!]
  checkout: Checkout
}

input CheckoutCreateInput {
  lines: [CheckoutLineInput]!
  email: String
  deliveryAddress: AddressInput
  billingAddress: AddressInput
}

type CheckoutCustomerAttach {
  errors: [Error!]
  checkout: Checkout
}

type CheckoutCustomerDetach {
  errors: [Error!]
  checkout: Checkout
}

type CheckoutEmailUpdate {
  errors: [Error!]
  checkout: Checkout
}

type CheckoutLine implements Node {
  id: ID!
  variant: SkillVariant!
  quantity: Int!
  totalPrice: TaxedMoney
  requiresDelivery: Boolean
}

type CheckoutLineCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutLineCountableEdge!]!
  totalCount: Int
}

type CheckoutLineCountableEdge {
  node: CheckoutLine!
  cursor: String!
}

type CheckoutLineDelete {
  errors: [Error!]
  checkout: Checkout
}

input CheckoutLineInput {
  quantity: Int!
  variantId: ID!
}

type CheckoutLinesAdd {
  errors: [Error!]
  checkout: Checkout
}

type CheckoutLinesUpdate {
  errors: [Error!]
  checkout: Checkout
}

type CheckoutPaymentCreate {
  errors: [Error!]
  checkout: Checkout
  payment: Payment
}

type CheckoutDeliveryAddressUpdate {
  errors: [Error!]
  checkout: Checkout
}

type CheckoutDeliveryMethodUpdate {
  errors: [Error!]
  checkout: Checkout
}

type CheckoutUpdateVoucher {
  errors: [Error!]
  checkout: Checkout
}

type ChoiceValue {
  raw: String
  verbose: String
}

type Collection implements Node {
  publicationDate: Date
  isPublished: Boolean!
  seoTitle: String
  seoDescription: String
  id: ID!
  name: String!
  slug: String!
  skills(before: String, after: String, first: Int, last: Int): SkillCountableConnection
  backgroundImage(size: Int): Image
  description: String!
  descriptionJson: JSONString!
  publishedDate: Date @deprecated(reason: "publishedDate is deprecated, use publicationDate instead")
  translation(languageCode: String!): CollectionTranslation
}

type CollectionAddSkills {
  errors: [Error!]
  collection: Collection
}

type CollectionCountableConnection {
  pageInfo: PageInfo!
  edges: [CollectionCountableEdge!]!
  totalCount: Int
}

type CollectionCountableEdge {
  node: Collection!
  cursor: String!
}

type CollectionCreate {
  errors: [Error!]
  collection: Collection
}

input CollectionCreateInput {
  isPublished: Boolean
  name: String
  slug: String
  description: String
  descriptionJson: JSONString
  backgroundImage: Upload
  backgroundImageAlt: String
  seo: SeoInput
  publicationDate: Date
  skills: [ID]
}

type CollectionDelete {
  errors: [Error!]
  collection: Collection
}

input CollectionInput {
  isPublished: Boolean
  name: String
  slug: String
  description: String
  descriptionJson: JSONString
  backgroundImage: Upload
  backgroundImageAlt: String
  seo: SeoInput
  publicationDate: Date
}

type CollectionRemoveSkills {
  errors: [Error!]
  collection: Collection
}

type CollectionTranslate {
  errors: [Error!]
  collection: Collection
}

type CollectionTranslation implements Node {
  seoTitle: String
  seoDescription: String
  id: ID!
  name: String!
  description: String!
  descriptionJson: JSONString!
  language: LanguageDisplay!
}

type CollectionUpdate {
  errors: [Error!]
  collection: Collection
}

type CountryDisplay {
  code: String!
  country: String!
  vat: VAT
}

type CreateToken {
  token: String
  errors: [Error]!
  user: User
}

type CreditCard {
  brand: String!
  firstDigits: String!
  lastDigits: String!
  expMonth: Int!
  expYear: Int!
}

type CustomerAddressCreate {
  errors: [Error!]
  address: Address
}

type CustomerCreate {
  errors: [Error!]
  user: User
}

type CustomerDelete {
  errors: [Error!]
  user: User
}

input CustomerInput {
  defaultBillingAddress: AddressInput
  defaultDeliveryAddress: AddressInput
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
}

type CustomerPasswordReset {
  errors: [Error!]
}

input CustomerPasswordResetInput {
  email: String!
}

type CustomerRegister {
  errors: [Error!]
  user: User
}

input CustomerRegisterInput {
  email: String!
  password: String!
}

type CustomerSetDefaultAddress {
  errors: [Error!]
  user: User
}

type CustomerUpdate {
  errors: [Error!]
  user: User
}

scalar Date

scalar DateTime

scalar Decimal

enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
}

type Domain {
  host: String!
  sslEnabled: Boolean!
  url: String!
}

type DraftTaskComplete {
  errors: [Error!]
  task: Task
}

type DraftTaskCreate {
  errors: [Error!]
  task: Task
}

input DraftTaskCreateInput {
  billingAddress: AddressInput
  user: ID
  userEmail: String
  discount: Decimal
  deliveryAddress: AddressInput
  deliveryMethod: ID
  voucher: ID
  lines: [TaskLineCreateInput]
}

type DraftTaskDelete {
  errors: [Error!]
  task: Task
}

input DraftTaskInput {
  billingAddress: AddressInput
  user: ID
  userEmail: String
  discount: Decimal
  deliveryAddress: AddressInput
  deliveryMethod: ID
  voucher: ID
}

type DraftTaskLineDelete {
  errors: [Error!]
  task: Task
  orderLine: TaskLine
}

type DraftTaskLineUpdate {
  errors: [Error!]
  task: Task
  orderLine: TaskLine
}

type DraftTaskLinesCreate {
  errors: [Error!]
  task: Task!
  orderLines: [TaskLine!]!
}

type DraftTaskUpdate {
  errors: [Error!]
  task: Task
}

type Error {
  field: String
  message: String
}

type Fulfillment implements Node {
  id: ID!
  fulfillmentTask: Int!
  status: FulfillmentStatus!
  trackingNumber: String!
  deliveryDate: DateTime!
  lines: [FulfillmentLine]
  statusDisplay: String
}

type FulfillmentCancel {
  errors: [Error!]
  fulfillment: Fulfillment
  task: Task
}

input FulfillmentCancelInput {
  restock: Boolean
}

type FulfillmentCreate {
  errors: [Error!]
  fulfillment: Fulfillment
  task: Task
}

input FulfillmentCreateInput {
  trackingNumber: String
  notifyCustomer: Boolean
  lines: [FulfillmentLineInput]!
}

type FulfillmentLine implements Node {
  id: ID!
  orderLine: TaskLine
  quantity: Int!
}

input FulfillmentLineInput {
  orderLineId: ID
  quantity: Int
}

enum FulfillmentStatus {
  FULFILLED
  CANCELED
}

type FulfillmentUpdateTracking {
  errors: [Error!]
  fulfillment: Fulfillment
  task: Task
}

input FulfillmentUpdateTrackingInput {
  trackingNumber: String
  notifyCustomer: Boolean
}

enum GatewaysEnum {
  DUMMY
  BRAINTREE
  RAZORPAY
  STRIPE
}

scalar GenericScalar

type Geolocalization {
  country: CountryDisplay
}

type HomepageCollectionUpdate {
  errors: [Error!]
  shop: Shop
}

type Image {
  url: String!
  alt: String
}

scalar JSONString

type LanguageDisplay {
  code: String!
  language: String!
}

type LoggedUserUpdate {
  errors: [Error!]
  user: User
}

type Margin {
  start: Int
  stop: Int
}

type Menu implements Node {
  id: ID!
  name: String!
  items: [MenuItem]
  children: [MenuItem]!
}

type MenuCountableConnection {
  pageInfo: PageInfo!
  edges: [MenuCountableEdge!]!
  totalCount: Int
}

type MenuCountableEdge {
  node: Menu!
  cursor: String!
}

type MenuCreate {
  errors: [Error!]
  menu: Menu
}

input MenuCreateInput {
  name: String
  items: [MenuItemInput]
}

type MenuDelete {
  errors: [Error!]
  menu: Menu
}

input MenuInput {
  name: String
}

type MenuItem implements Node {
  id: ID!
  menu: Menu!
  name: String!
  parent: MenuItem
  url: String
  category: Category
  collection: Collection
  page: Page
  level: Int!
  children: [MenuItem]
  translation(languageCode: String!): MenuItemTranslation
}

type MenuItemCountableConnection {
  pageInfo: PageInfo!
  edges: [MenuItemCountableEdge!]!
  totalCount: Int
}

type MenuItemCountableEdge {
  node: MenuItem!
  cursor: String!
}

type MenuItemCreate {
  errors: [Error!]
  menuItem: MenuItem
}

input MenuItemCreateInput {
  name: String
  url: String
  category: ID
  collection: ID
  page: ID
  menu: ID!
  parent: ID
}

type MenuItemDelete {
  errors: [Error!]
  menuItem: MenuItem
}

input MenuItemInput {
  name: String
  url: String
  category: ID
  collection: ID
  page: ID
}

type MenuItemTranslate {
  errors: [Error!]
  menuItem: MenuItem
}

type MenuItemTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

type MenuItemUpdate {
  errors: [Error!]
  menuItem: MenuItem
}

type MenuUpdate {
  errors: [Error!]
  menu: Menu
}

type Money {
  currency: String!
  amount: Float!
  localized: String!
}

type MoneyRange {
  start: Money
  stop: Money
}

type Mutations {
  authorizationKeyAdd(input: AuthorizationKeyInput!, keyType: AuthorizationKeyType!): AuthorizationKeyAdd
  authorizationKeyDelete(keyType: AuthorizationKeyType!): AuthorizationKeyDelete
  homepageCollectionUpdate(collection: ID): HomepageCollectionUpdate
  shopDomainUpdate(input: SiteDomainInput): ShopDomainUpdate
  shopSettingsUpdate(input: ShopSettingsInput!): ShopSettingsUpdate
  shopFetchTaxRates: ShopFetchTaxRates
  shopSettingsTranslate(input: ShopSettingsTranslationInput!, languageCode: String!): ShopSettingsTranslate
  deliveryPriceCreate(input: DeliveryPriceInput!): DeliveryPriceCreate
  deliveryPriceDelete(id: ID!): DeliveryPriceDelete
  deliveryPriceUpdate(id: ID!, input: DeliveryPriceInput!): DeliveryPriceUpdate
  deliveryPriceTranslate(id: ID!, input: NameTranslationInput!, languageCode: String!): DeliveryPriceTranslate
  deliveryZoneCreate(input: DeliveryZoneInput!): DeliveryZoneCreate
  deliveryZoneDelete(id: ID!): DeliveryZoneDelete
  deliveryZoneUpdate(id: ID!, input: DeliveryZoneInput!): DeliveryZoneUpdate
  attributeCreate(id: ID!, input: AttributeCreateInput!, type: AttributeTypeEnum!): AttributeCreate
  attributeDelete(id: ID!): AttributeDelete
  attributeUpdate(id: ID!, input: AttributeUpdateInput!): AttributeUpdate
  attributeTranslate(id: ID!, input: NameTranslationInput!, languageCode: String!): AttributeTranslate
  attributeValueCreate(attribute: ID!, input: AttributeValueCreateInput!): AttributeValueCreate
  attributeValueDelete(id: ID!): AttributeValueDelete
  attributeValueUpdate(id: ID!, input: AttributeValueCreateInput!): AttributeValueUpdate
  attributeValueTranslate(id: ID!, input: NameTranslationInput!, languageCode: String!): AttributeValueTranslate
  categoryCreate(input: CategoryInput!, parent: ID): CategoryCreate
  categoryDelete(id: ID!): CategoryDelete
  categoryUpdate(id: ID!, input: CategoryInput!): CategoryUpdate
  categoryTranslate(id: ID!, input: TranslationInput!, languageCode: String!): CategoryTranslate
  collectionAddSkills(collectionId: ID!, skills: [ID]!): CollectionAddSkills
  collectionCreate(input: CollectionCreateInput!): CollectionCreate
  collectionDelete(id: ID!): CollectionDelete
  collectionRemoveSkills(collectionId: ID!, skills: [ID]!): CollectionRemoveSkills
  collectionUpdate(id: ID!, input: CollectionInput!): CollectionUpdate
  collectionTranslate(id: ID!, input: TranslationInput!, languageCode: String!): CollectionTranslate
  skillCreate(input: SkillCreateInput!): SkillCreate
  skillDelete(id: ID!): SkillDelete
  skillUpdate(id: ID!, input: SkillInput!): SkillUpdate
  skillTranslate(id: ID!, input: TranslationInput!, languageCode: String!): SkillTranslate
  skillImageCreate(input: SkillImageCreateInput!): SkillImageCreate
  skillImageDelete(id: ID!): SkillImageDelete
  skillImageReorder(imagesIds: [ID]!, skillId: ID!): SkillImageReorder
  skillImageUpdate(id: ID!, input: SkillImageUpdateInput!): SkillImageUpdate
  skillTypeCreate(input: SkillTypeInput!): SkillTypeCreate
  skillTypeDelete(id: ID!): SkillTypeDelete
  skillTypeUpdate(id: ID!, input: SkillTypeInput!): SkillTypeUpdate
  skillVariantCreate(input: SkillVariantCreateInput!): SkillVariantCreate
  skillVariantDelete(id: ID!): SkillVariantDelete
  skillVariantUpdate(id: ID!, input: SkillVariantInput!): SkillVariantUpdate
  skillVariantTranslate(id: ID!, input: NameTranslationInput!, languageCode: String!): SkillVariantTranslate
  variantImageAssign(imageId: ID!, variantId: ID!): VariantImageAssign
  variantImageUnassign(imageId: ID!, variantId: ID!): VariantImageUnassign
  paymentCapture(amount: Decimal, paymentId: ID!): PaymentCapture
  paymentRefund(amount: Decimal, paymentId: ID!): PaymentRefund
  paymentVoid(paymentId: ID!): PaymentVoid
  pageCreate(input: PageInput!): PageCreate
  pageDelete(id: ID!): PageDelete
  pageUpdate(id: ID!, input: PageInput!): PageUpdate
  pageTranslate(id: ID!, input: PageTranslationInput!, languageCode: String!): PageTranslate
  draftTaskComplete(id: ID!): DraftTaskComplete
  draftTaskCreate(input: DraftTaskCreateInput!): DraftTaskCreate
  draftTaskDelete(id: ID!): DraftTaskDelete
  draftTaskLinesCreate(id: ID!, input: [TaskLineCreateInput]!): DraftTaskLinesCreate
  draftTaskLineDelete(id: ID!): DraftTaskLineDelete
  draftTaskLineUpdate(id: ID!, input: TaskLineInput!): DraftTaskLineUpdate
  draftTaskUpdate(id: ID!, input: DraftTaskInput!): DraftTaskUpdate
  orderAddNote(task: ID!, input: TaskAddNoteInput!): TaskAddNote
  orderCancel(id: ID!, restock: Boolean!): TaskCancel
  orderCapture(amount: Decimal!, id: ID!): TaskCapture
  orderFulfillmentCancel(id: ID!, input: FulfillmentCancelInput!): FulfillmentCancel
  orderFulfillmentCreate(input: FulfillmentCreateInput!, task: ID): FulfillmentCreate
  orderFulfillmentUpdateTracking(id: ID!, input: FulfillmentUpdateTrackingInput!): FulfillmentUpdateTracking
  orderMarkAsPaid(id: ID!): TaskMarkAsPaid
  orderRefund(amount: Decimal!, id: ID!): TaskRefund
  orderUpdate(id: ID!, input: TaskUpdateInput!): TaskUpdate
  orderUpdateDelivery(task: ID!, input: TaskUpdateDeliveryInput): TaskUpdateDelivery
  orderVoid(id: ID!): TaskVoid
  assignNavigation(menu: ID, navigationType: NavigationType!): AssignNavigation
  menuCreate(input: MenuCreateInput!): MenuCreate
  menuDelete(id: ID!): MenuDelete
  menuUpdate(id: ID!, input: MenuInput!): MenuUpdate
  menuItemCreate(input: MenuItemCreateInput!): MenuItemCreate
  menuItemDelete(id: ID!): MenuItemDelete
  menuItemUpdate(id: ID!, input: MenuItemInput!): MenuItemUpdate
  menuItemTranslate(id: ID!, input: NameTranslationInput!, languageCode: String!): MenuItemTranslate
  saleCreate(input: SaleInput!): SaleCreate
  saleDelete(id: ID!): SaleDelete
  saleUpdate(id: ID!, input: SaleInput!): SaleUpdate
  saleCataloguesAdd(id: ID!, input: CatalogueInput!): SaleAddCatalogues
  saleCataloguesRemove(id: ID!, input: CatalogueInput!): SaleRemoveCatalogues
  voucherCreate(input: VoucherInput!): VoucherCreate
  voucherDelete(id: ID!): VoucherDelete
  voucherUpdate(id: ID!, input: VoucherInput!): VoucherUpdate
  voucherCataloguesAdd(id: ID!, input: CatalogueInput!): VoucherAddCatalogues
  voucherCataloguesRemove(id: ID!, input: CatalogueInput!): VoucherRemoveCatalogues
  voucherTranslate(id: ID!, input: NameTranslationInput!, languageCode: String!): VoucherTranslate
  tokenCreate(email: String!, password: String!): CreateToken
  tokenRefresh(token: String!): Refresh
  tokenVerify(token: String!): VerifyToken
  checkoutBillingAddressUpdate(billingAddress: AddressInput, checkoutId: ID): CheckoutBillingAddressUpdate
  checkoutComplete(checkoutId: ID!): CheckoutComplete
  checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate
  checkoutCustomerAttach(checkoutId: ID!, customerId: ID!): CheckoutCustomerAttach
  checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach
  checkoutEmailUpdate(checkoutId: ID, email: String!): CheckoutEmailUpdate
  checkoutLineDelete(checkoutId: ID!, lineId: ID): CheckoutLineDelete
  checkoutLinesAdd(checkoutId: ID!, lines: [CheckoutLineInput]!): CheckoutLinesAdd
  checkoutLinesUpdate(checkoutId: ID!, lines: [CheckoutLineInput]!): CheckoutLinesUpdate
  checkoutPaymentCreate(checkoutId: ID!, input: PaymentInput!): CheckoutPaymentCreate
  checkoutDeliveryAddressUpdate(checkoutId: ID, deliveryAddress: AddressInput): CheckoutDeliveryAddressUpdate
  checkoutDeliveryMethodUpdate(checkoutId: ID, deliveryMethodId: ID!): CheckoutDeliveryMethodUpdate
  checkoutUpdateVoucher(checkoutId: ID!, voucherCode: String): CheckoutUpdateVoucher
  passwordReset(email: String!): PasswordReset
  setPassword(id: ID!, input: SetPasswordInput!): SetPassword
  customerCreate(input: UserCreateInput!): CustomerCreate
  customerDelete(id: ID!): CustomerDelete
  customerPasswordReset(input: CustomerPasswordResetInput!): CustomerPasswordReset
  customerRegister(input: CustomerRegisterInput!): CustomerRegister
  customerUpdate(id: ID!, input: CustomerInput!): CustomerUpdate
  customerAddressCreate(input: AddressInput!): CustomerAddressCreate
  customerSetDefaultAddress(id: ID!, type: AddressTypeEnum!): CustomerSetDefaultAddress
  loggedUserUpdate(input: UserAddressInput!): LoggedUserUpdate
  staffCreate(input: StaffCreateInput!): StaffCreate
  staffDelete(id: ID!): StaffDelete
  staffUpdate(id: ID!, input: StaffInput!): StaffUpdate
  addressCreate(input: AddressCreateInput!): AddressCreate
  addressDelete(id: ID!): AddressDelete
  addressUpdate(id: ID!, input: AddressInput!): AddressUpdate
}

input NameTranslationInput {
  name: String
}

type Navigation {
  main: Menu
  secondary: Menu
}

enum NavigationType {
  MAIN
  SECONDARY
}

interface Node {
  id: ID!
}

type Task implements Node {
  id: ID!
  created: DateTime!
  status: TaskStatus!
  user: User
  languageCode: String!
  trackingClientId: String!
  billingAddress: Address
  deliveryAddress: Address
  userEmail: String
  deliveryMethod: DeliveryMethod
  deliveryPrice: TaxedMoney
  deliveryMethodName: String
  token: String!
  total: TaxedMoney
  voucher: Voucher
  discountAmount: Money
  discountName: String!
  translatedDiscountName: String!
  displayGrossPrices: Boolean!
  customerNote: String!
  weight: Weight
  lines: [TaskLine]!
  fulfillments: [Fulfillment]!
  events: [TaskEvent]
  payments: [Payment]
  actions: [TaskAction]!
  availableDeliveryMethods: [DeliveryMethod]
  number: String
  isPaid: Boolean
  paymentStatus: PaymentChargeStatusEnum
  paymentStatusDisplay: String
  subtotal: TaxedMoney
  statusDisplay: String
  canFinalize: Boolean!
  totalAuthorized: Money
  totalCaptured: Money
  totalBalance: Money!
  isDeliveryRequired: Boolean!
}

enum TaskAction {
  CAPTURE
  MARK_AS_PAID
  REFUND
  VOID
}

type TaskAddNote {
  errors: [Error!]
  task: Task
  event: TaskEvent
}

input TaskAddNoteInput {
  message: String
}

type TaskCancel {
  errors: [Error!]
  task: Task
}

type TaskCapture {
  errors: [Error!]
  task: Task
}

type TaskCountableConnection {
  pageInfo: PageInfo!
  edges: [TaskCountableEdge!]!
  totalCount: Int
}

type TaskCountableEdge {
  node: Task!
  cursor: String!
}

enum TaskDirection {
  ASC
  DESC
}

type TaskEvent implements Node {
  id: ID!
  date: DateTime
  type: TaskEvents
  user(id: ID): User
  message: String
  email: String
  emailType: TaskEventsEmails
  amount: Float
  quantity: Int
  composedId: String
  orderNumber: String
  oversoldItems: [String]
}

type TaskEventCountableConnection {
  pageInfo: PageInfo!
  edges: [TaskEventCountableEdge!]!
  totalCount: Int
}

type TaskEventCountableEdge {
  node: TaskEvent!
  cursor: String!
}

enum TaskEvents {
  PLACED
  PLACED_FROM_DRAFT
  OVERSOLD_ITEMS
  ORDER_MARKED_AS_PAID
  CANCELED
  ORDER_FULLY_PAID
  UPDATED
  EMAIL_SENT
  PAYMENT_CAPTURED
  PAYMENT_REFUNDED
  PAYMENT_VOIDED
  FULFILLMENT_CANCELED
  FULFILLMENT_RESTOCKED_ITEMS
  FULFILLMENT_FULFILLED_ITEMS
  TRACKING_UPDATED
  NOTE_ADDED
  OTHER
}

enum TaskEventsEmails {
  PAYMENT
  DELIVERY
  ORDER
  FULFILLMENT
}

type TaskLine implements Node {
  id: ID!
  skillName: String!
  translatedSkillName: String!
  skillSku: String!
  isDeliveryRequired: Boolean!
  quantity: Int!
  quantityFulfilled: Int!
  unitPrice: TaxedMoney
  taxRate: Float!
  thumbnailUrl(size: Int): String @deprecated(reason: "thumbnailUrl is deprecated, use thumbnail instead")
  thumbnail(size: Int): Image
}

input TaskLineCreateInput {
  quantity: Int!
  variantId: ID!
}

input TaskLineInput {
  quantity: Int!
}

type TaskMarkAsPaid {
  errors: [Error!]
  task: Task
}

type TaskRefund {
  errors: [Error!]
  task: Task
}

enum TaskStatus {
  DRAFT
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELED
}

enum TaskStatusFilter {
  READY_TO_FULFILL
  READY_TO_CAPTURE
}

type TaskUpdate {
  errors: [Error!]
  task: Task
}

input TaskUpdateInput {
  billingAddress: AddressInput
  userEmail: String
  deliveryAddress: AddressInput
}

type TaskUpdateDelivery {
  errors: [Error!]
  task: Task
}

input TaskUpdateDeliveryInput {
  deliveryMethod: ID
}

type TaskVoid {
  errors: [Error!]
  task: Task
}

type Page implements Node {
  publicationDate: Date
  isPublished: Boolean!
  seoTitle: String
  seoDescription: String
  id: ID!
  slug: String!
  title: String!
  content: String!
  contentJson: JSONString!
  created: DateTime!
  availableOn: Date @deprecated(reason: "availableOn is deprecated, use publicationDate instead")
  isVisible: Boolean @deprecated(reason: "isVisible is deprecated, use isPublished instead")
  translation(languageCode: String!): PageTranslation
}

type PageCountableConnection {
  pageInfo: PageInfo!
  edges: [PageCountableEdge!]!
  totalCount: Int
}

type PageCountableEdge {
  node: Page!
  cursor: String!
}

type PageCreate {
  errors: [Error!]
  page: Page
}

type PageDelete {
  errors: [Error!]
  page: Page
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PageInput {
  slug: String
  title: String
  content: String
  contentJson: JSONString
  isPublished: Boolean
  publicationDate: String
  seo: SeoInput
}

type PageTranslate {
  errors: [Error!]
  page: Page
}

type PageTranslation implements Node {
  seoTitle: String
  seoDescription: String
  id: ID!
  title: String!
  content: String!
  contentJson: JSONString!
  language: LanguageDisplay!
}

input PageTranslationInput {
  seoTitle: String
  seoDescription: String
  title: String
  content: String
  contentJson: JSONString
}

type PageUpdate {
  errors: [Error!]
  page: Page
}

type PasswordReset {
  errors: [Error!]
}

type Payment implements Node {
  id: ID!
  gateway: String!
  isActive: Boolean!
  created: DateTime!
  modified: DateTime!
  chargeStatus: PaymentChargeStatusEnum!
  token: String!
  total: Money
  capturedAmount: Money
  checkout: Checkout
  task: Task
  billingEmail: String!
  ccFirstDigits: String!
  ccLastDigits: String!
  ccBrand: String!
  ccExpMonth: Int
  ccExpYear: Int
  customerIpAddress: String
  extraData: String!
  transactions: [Transaction]
  actions: [TaskAction]!
  billingAddress: Address
  availableCaptureAmount: Money
  availableRefundAmount: Money
  creditCard: CreditCard
}

type PaymentCapture {
  errors: [Error!]
  payment: Payment
}

enum PaymentChargeStatusEnum {
  NOT_CHARGED
  PARTIALLY_CHARGED
  FULLY_CHARGED
  PARTIALLY_REFUNDED
  FULLY_REFUNDED
}

type PaymentCountableConnection {
  pageInfo: PageInfo!
  edges: [PaymentCountableEdge!]!
  totalCount: Int
}

type PaymentCountableEdge {
  node: Payment!
  cursor: String!
}

input PaymentInput {
  gateway: GatewaysEnum!
  token: String!
  amount: Decimal!
  billingAddress: AddressInput
}

type PaymentRefund {
  errors: [Error!]
  payment: Payment
}

type PaymentVoid {
  errors: [Error!]
  payment: Payment
}

type PermissionDisplay {
  code: PermissionEnum!
  name: String!
}

enum PermissionEnum {
  MANAGE_USERS
  MANAGE_STAFF
  IMPERSONATE_USERS
  MANAGE_DISCOUNTS
  MANAGE_MENUS
  MANAGE_ORDERS
  MANAGE_PAGES
  MANAGE_SKILLS
  MANAGE_DELIVERY
  MANAGE_SETTINGS
  MANAGE_TRANSLATIONS
}

type Skill implements Node {
  id: ID!
  publicationDate: Date
  isPublished: Boolean!
  seoTitle: String
  seoDescription: String
  skillType: SkillType!
  name: String!
  description: String!
  descriptionJson: JSONString!
  category: Category!
  price: Money
  attributes: [SelectedAttribute!]!
  updatedAt: DateTime
  chargeTaxes: Boolean!
  taxRate: TaxRateType
  weight: Weight
  variants: [SkillVariant]
  images: [SkillImage]
  collections: [Collection]
  url: String!
  thumbnailUrl(size: Int): String @deprecated(reason: "thumbnailUrl is deprecated, use\\n         thumbnail instead")
  thumbnail(size: Int): Image
  availability: SkillAvailability
  purchaseCost: MoneyRange
  margin: Margin
  imageById(id: ID): SkillImage
  availableOn: Date @deprecated(reason: "availableOn is deprecated, use publicationDate instead")
  translation(languageCode: String!): SkillTranslation
}

type SkillAvailability {
  available: Boolean
  onSale: Boolean
  discount: TaxedMoney
  discountLocalCurrency: TaxedMoney
  priceRange: TaxedMoneyRange
  priceRangeUndiscounted: TaxedMoneyRange
  priceRangeLocalCurrency: TaxedMoneyRange
}

type SkillCountableConnection {
  pageInfo: PageInfo!
  edges: [SkillCountableEdge!]!
  totalCount: Int
}

type SkillCountableEdge {
  node: Skill!
  cursor: String!
}

type SkillCreate {
  errors: [Error!]
  skill: Skill
}

input SkillCreateInput {
  attributes: [AttributeValueInput]
  publicationDate: Date
  category: ID
  chargeTaxes: Boolean
  collections: [ID]
  description: String
  descriptionJson: JSONString
  isPublished: Boolean
  name: String
  price: Decimal
  taxRate: TaxRateType
  seo: SeoInput
  weight: WeightScalar
  sku: String
  quantity: Int
  trackInventory: Boolean
  skillType: ID!
}

type SkillDelete {
  errors: [Error!]
  skill: Skill
}

type SkillImage implements Node {
  sortTask: Int!
  id: ID!
  alt: String!
  url(size: Int): String!
}

type SkillImageCreate {
  errors: [Error!]
  skill: Skill
  image: SkillImage
}

input SkillImageCreateInput {
  alt: String
  image: Upload!
  skill: ID!
}

type SkillImageDelete {
  errors: [Error!]
  skill: Skill
  image: SkillImage
}

type SkillImageReorder {
  errors: [Error!]
  skill: Skill
  images: [SkillImage]
}

type SkillImageUpdate {
  errors: [Error!]
  skill: Skill
  image: SkillImage
}

input SkillImageUpdateInput {
  alt: String
}

input SkillInput {
  attributes: [AttributeValueInput]
  publicationDate: Date
  category: ID
  chargeTaxes: Boolean
  collections: [ID]
  description: String
  descriptionJson: JSONString
  isPublished: Boolean
  name: String
  price: Decimal
  taxRate: TaxRateType
  seo: SeoInput
  weight: WeightScalar
  sku: String
  quantity: Int
  trackInventory: Boolean
}

input SkillTask {
  field: SkillTaskField!
  direction: TaskDirection!
}

enum SkillTaskField {
  NAME
  PRICE
  DATE
}

type SkillTranslate {
  errors: [Error!]
  skill: Skill
}

type SkillTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  language: LanguageDisplay!
}

type SkillType implements Node {
  id: ID!
  name: String!
  hasVariants: Boolean!
  isDeliveryRequired: Boolean!
  taxRate: TaxRateType
  weight: Weight
  skills(before: String, after: String, first: Int, last: Int): SkillCountableConnection
  skillAttributes: [Attribute]
  variantAttributes: [Attribute]
}

type SkillTypeCountableConnection {
  pageInfo: PageInfo!
  edges: [SkillTypeCountableEdge!]!
  totalCount: Int
}

type SkillTypeCountableEdge {
  node: SkillType!
  cursor: String!
}

type SkillTypeCreate {
  errors: [Error!]
  skillType: SkillType
}

type SkillTypeDelete {
  errors: [Error!]
  skillType: SkillType
}

input SkillTypeInput {
  name: String
  hasVariants: Boolean
  skillAttributes: [ID]
  variantAttributes: [ID]
  isDeliveryRequired: Boolean
  weight: WeightScalar
  taxRate: TaxRateType
}

type SkillTypeUpdate {
  errors: [Error!]
  skillType: SkillType
}

type SkillUpdate {
  errors: [Error!]
  skill: Skill
}

type SkillVariant implements Node {
  id: ID!
  sku: String!
  name: String!
  priceOverride: Money
  skill: Skill!
  attributes: [SelectedAttribute!]!
  images: [SkillImage]
  trackInventory: Boolean!
  quantity: Int!
  quantityAllocated: Int!
  costPrice: Money
  weight: Weight
  stockQuantity: Int!
  price: Money
  margin: Int
  quantityTasked: Int
  revenue(period: ReportingPeriod): TaxedMoney
  translation(languageCode: String!): SkillVariantTranslation
}

type SkillVariantCountableConnection {
  pageInfo: PageInfo!
  edges: [SkillVariantCountableEdge!]!
  totalCount: Int
}

type SkillVariantCountableEdge {
  node: SkillVariant!
  cursor: String!
}

type SkillVariantCreate {
  errors: [Error!]
  skillVariant: SkillVariant
}

input SkillVariantCreateInput {
  attributes: [AttributeValueInput]!
  costPrice: Decimal
  priceOverride: Decimal
  sku: String
  quantity: Int
  trackInventory: Boolean
  weight: WeightScalar
  skill: ID!
}

type SkillVariantDelete {
  errors: [Error!]
  skillVariant: SkillVariant
}

input SkillVariantInput {
  attributes: [AttributeValueInput]
  costPrice: Decimal
  priceOverride: Decimal
  sku: String
  quantity: Int
  trackInventory: Boolean
  weight: WeightScalar
}

type SkillVariantTranslate {
  errors: [Error!]
  skillVariant: SkillVariant
}

type SkillVariantTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

type SkillVariantUpdate {
  errors: [Error!]
  skillVariant: SkillVariant
}

type Query {
  translations(kind: TranslatableKinds!, before: String, after: String, first: Int, last: Int): TranslatableItemConnection
  shop: Shop
  deliveryZone(id: ID!): DeliveryZone
  deliveryZones(before: String, after: String, first: Int, last: Int): DeliveryZoneCountableConnection
  attributes(query: String, inCategory: ID, inCollection: ID, before: String, after: String, first: Int, last: Int): AttributeCountableConnection
  categories(query: String, level: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  category(id: ID!): Category
  collection(id: ID!): Collection
  collections(query: String, before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  skill(id: ID!): Skill
  skills(attributes: [AttributeScalar], categories: [ID], collections: [ID], priceLte: Float, priceGte: Float, sortBy: SkillTask, stockAvailability: StockAvailability, query: String, before: String, after: String, first: Int, last: Int): SkillCountableConnection
  skillType(id: ID!): SkillType
  skillTypes(before: String, after: String, first: Int, last: Int): SkillTypeCountableConnection
  skillVariant(id: ID!): SkillVariant
  skillVariants(ids: [ID], before: String, after: String, first: Int, last: Int): SkillVariantCountableConnection
  reportSkillSales(period: ReportingPeriod!, before: String, after: String, first: Int, last: Int): SkillVariantCountableConnection
  payment(id: ID): Payment
  payments(before: String, after: String, first: Int, last: Int): PaymentCountableConnection
  paymentClientToken(gateway: GatewaysEnum): String
  page(id: ID, slug: String): Page
  pages(query: String, before: String, after: String, first: Int, last: Int): PageCountableConnection
  homepageEvents(before: String, after: String, first: Int, last: Int): TaskEventCountableConnection
  task(id: ID!): Task
  tasks(query: String, created: ReportingPeriod, status: TaskStatusFilter, before: String, after: String, first: Int, last: Int): TaskCountableConnection
  ordersTotal(period: ReportingPeriod): TaxedMoney
  orderByToken(token: String!): Task
  menu(id: ID, name: String): Menu
  menus(query: String, before: String, after: String, first: Int, last: Int): MenuCountableConnection
  menuItem(id: ID!): MenuItem
  menuItems(query: String, before: String, after: String, first: Int, last: Int): MenuItemCountableConnection
  sale(id: ID!): Sale
  sales(query: String, before: String, after: String, first: Int, last: Int): SaleCountableConnection
  voucher(id: ID!): Voucher
  vouchers(query: String, before: String, after: String, first: Int, last: Int): VoucherCountableConnection
  checkout(token: UUID): Checkout
  checkouts(before: String, after: String, first: Int, last: Int): CheckoutCountableConnection
  checkoutLine(id: ID): CheckoutLine
  checkoutLines(before: String, after: String, first: Int, last: Int): CheckoutLineCountableConnection
  addressValidator(input: AddressValidationInput!): AddressValidationData
  customers(query: String, before: String, after: String, first: Int, last: Int): UserCountableConnection
  me: User
  staffUsers(query: String, before: String, after: String, first: Int, last: Int): UserCountableConnection
  user(id: ID!): User
  node(id: ID!): Node
}

type ReducedRate {
  rate: Float!
  rateType: TaxRateType!
}

type Refresh {
  token: String
  payload: GenericScalar
}

enum ReportingPeriod {
  TODAY
  THIS_MONTH
}

type Sale implements Node {
  id: ID!
  name: String!
  type: SaleType!
  value: Float!
  skills(before: String, after: String, first: Int, last: Int): SkillCountableConnection
  categories(before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  collections(before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  startDate: Date!
  endDate: Date
}

type SaleAddCatalogues {
  errors: [Error!]
  sale: Sale
}

type SaleCountableConnection {
  pageInfo: PageInfo!
  edges: [SaleCountableEdge!]!
  totalCount: Int
}

type SaleCountableEdge {
  node: Sale!
  cursor: String!
}

type SaleCreate {
  errors: [Error!]
  sale: Sale
}

type SaleDelete {
  errors: [Error!]
  sale: Sale
}

input SaleInput {
  name: String
  type: DiscountValueTypeEnum
  value: Decimal
  skills: [ID]
  categories: [ID]
  collections: [ID]
  startDate: Date
  endDate: Date
}

type SaleRemoveCatalogues {
  errors: [Error!]
  sale: Sale
}

enum SaleType {
  FIXED
  PERCENTAGE
}

type SaleUpdate {
  errors: [Error!]
  sale: Sale
}

type SelectedAttribute {
  attribute: Attribute!
  value: AttributeValue!
}

input SeoInput {
  title: String
  description: String
}

type SetPassword {
  errors: [Error!]
  user: User
}

input SetPasswordInput {
  token: String!
  password: String!
}

type DeliveryMethod implements Node {
  id: ID!
  name: String!
  type: DeliveryMethodTypeEnum
  price: Money
  minimumTaskPrice: Money
  maximumTaskPrice: Money
  minimumTaskWeight: Weight
  maximumTaskWeight: Weight
  translation(languageCode: String!): DeliveryMethodTranslation
}

type DeliveryMethodTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum DeliveryMethodTypeEnum {
  PRICE
  WEIGHT
}

type DeliveryPriceCreate {
  errors: [Error!]
  deliveryMethod: DeliveryMethod
}

type DeliveryPriceDelete {
  errors: [Error!]
  deliveryMethod: DeliveryMethod
}

input DeliveryPriceInput {
  name: String
  price: Decimal
  minimumTaskPrice: Decimal
  maximumTaskPrice: Decimal
  minimumTaskWeight: WeightScalar
  maximumTaskWeight: WeightScalar
  type: DeliveryMethodTypeEnum
  deliveryZone: ID
}

type DeliveryPriceTranslate {
  errors: [Error!]
  deliveryMethod: DeliveryMethod
}

type DeliveryPriceUpdate {
  errors: [Error!]
  deliveryMethod: DeliveryMethod
}

type DeliveryZone implements Node {
  id: ID!
  name: String!
  countries: [CountryDisplay]
  default: Boolean!
  deliveryMethods: [DeliveryMethod]
  priceRange: MoneyRange
}

type DeliveryZoneCountableConnection {
  pageInfo: PageInfo!
  edges: [DeliveryZoneCountableEdge!]!
  totalCount: Int
}

type DeliveryZoneCountableEdge {
  node: DeliveryZone!
  cursor: String!
}

type DeliveryZoneCreate {
  errors: [Error!]
  deliveryZone: DeliveryZone
}

type DeliveryZoneDelete {
  errors: [Error!]
  deliveryZone: DeliveryZone
}

input DeliveryZoneInput {
  name: String
  countries: [String]
  default: Boolean
}

type DeliveryZoneUpdate {
  errors: [Error!]
  deliveryZone: DeliveryZone
}

type Shop {
  geolocalization: Geolocalization
  authorizationKeys: [AuthorizationKey]!
  countries: [CountryDisplay]!
  currencies: [String]!
  defaultCurrency: String!
  defaultCountry: CountryDisplay
  description: String
  domain: Domain!
  homepageCollection: Collection
  languages: [LanguageDisplay]!
  name: String!
  navigation: Navigation
  permissions: [PermissionDisplay]!
  phonePrefixes: [String]!
  headerText: String
  includeTaxesInPrices: Boolean!
  displayGrossPrices: Boolean!
  chargeTaxesOnDelivery: Boolean!
  trackInventoryByDefault: Boolean
  defaultWeightUnit: WeightUnitsEnum
  translation(languageCode: String!): ShopTranslation
}

type ShopDomainUpdate {
  errors: [Error!]
  shop: Shop
}

type ShopFetchTaxRates {
  errors: [Error!]
  shop: Shop
}

input ShopSettingsInput {
  headerText: String
  description: String
  includeTaxesInPrices: Boolean
  displayGrossPrices: Boolean
  chargeTaxesOnDelivery: Boolean
  trackInventoryByDefault: Boolean
  defaultWeightUnit: WeightUnitsEnum
}

type ShopSettingsTranslate {
  errors: [Error!]
  shop: Shop
}

input ShopSettingsTranslationInput {
  headerText: String
  description: String
}

type ShopSettingsUpdate {
  errors: [Error!]
  shop: Shop
}

type ShopTranslation implements Node {
  id: ID!
  headerText: String!
  description: String!
  language: LanguageDisplay!
}

input SiteDomainInput {
  domain: String
  name: String
}

type StaffCreate {
  errors: [Error!]
  user: User
}

input StaffCreateInput {
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  permissions: [PermissionEnum]
  sendPasswordEmail: Boolean
}

type StaffDelete {
  errors: [Error!]
  user: User
}

input StaffInput {
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  permissions: [PermissionEnum]
}

type StaffUpdate {
  errors: [Error!]
  user: User
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}

enum TaxRateType {
  ACCOMMODATION
  ADMISSION_TO_CULTURAL_EVENTS
  ADMISSION_TO_ENTERTAINMENT_EVENTS
  ADMISSION_TO_SPORTING_EVENTS
  ADVERTISING
  AGRICULTURAL_SUPPLIES
  BABY_FOODSTUFFS
  BIKES
  BOOKS
  CHILDRENS_CLOTHING
  DOMESTIC_FUEL
  DOMESTIC_SERVICES
  E_BOOKS
  FOODSTUFFS
  HOTELS
  MEDICAL
  NEWSPAPERS
  PASSENGER_TRANSPORT
  PHARMACEUTICALS
  PROPERTY_RENOVATIONS
  RESTAURANTS
  SOCIAL_HOUSING
  STANDARD
  WATER
  WINE
}

type TaxedMoney {
  currency: String!
  gross: Money!
  net: Money!
  tax: Money!
}

type TaxedMoneyRange {
  start: TaxedMoney
  stop: TaxedMoney
}

type Transaction implements Node {
  id: ID!
  created: DateTime!
  payment: Payment!
  token: String!
  kind: TransactionKind!
  isSuccess: Boolean!
  amount: Money
  error: TransactionError
  gatewayResponse: JSONString!
}

enum TransactionError {
  TRANSACTIONERROR_INCORRECT_NUMBER
  TRANSACTIONERROR_INVALID_NUMBER
  TRANSACTIONERROR_INCORRECT_CVV
  TRANSACTIONERROR_INVALID_CVV
  TRANSACTIONERROR_INCORRECT_ZIP
  TRANSACTIONERROR_INCORRECT_ADDRESS
  TRANSACTIONERROR_INVALID_EXPIRY_DATE
  TRANSACTIONERROR_EXPIRED
  TRANSACTIONERROR_PROCESSING_ERROR
  TRANSACTIONERROR_DECLINED
}

enum TransactionKind {
  AUTH
  CHARGE
  REFUND
  CAPTURE
  VOID
}

union TranslatableItem = Skill | Category | Collection | Attribute | AttributeValue | SkillVariant | Page | DeliveryMethod | Voucher | MenuItem

type TranslatableItemConnection {
  pageInfo: PageInfo!
  edges: [TranslatableItemEdge!]!
  totalCount: Int
}

type TranslatableItemEdge {
  node: TranslatableItem!
  cursor: String!
}

enum TranslatableKinds {
  SKILL
  COLLECTION
  CATEGORY
  PAGE
  DELIVERY_METHOD
  VOUCHER
  ATTRIBUTE
  ATTRIBUTE_VALUE
  VARIANT
  MENU_ITEM
}

input TranslationInput {
  seoTitle: String
  seoDescription: String
  name: String
  description: String
  descriptionJson: JSONString
}

scalar UUID

scalar Upload

type User implements Node {
  id: ID!
  lastLogin: DateTime
  email: String!
  firstName: String!
  lastName: String!
  addresses: [Address]
  isStaff: Boolean!
  token: UUID!
  isActive: Boolean!
  note: String
  dateJoined: DateTime!
  defaultDeliveryAddress: Address
  defaultBillingAddress: Address
  tasks(before: String, after: String, first: Int, last: Int): TaskCountableConnection
  checkout: Checkout
  permissions: [PermissionDisplay]
}

input UserAddressInput {
  defaultBillingAddress: AddressInput
  defaultDeliveryAddress: AddressInput
}

type UserCountableConnection {
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!
  totalCount: Int
}

type UserCountableEdge {
  node: User!
  cursor: String!
}

input UserCreateInput {
  defaultBillingAddress: AddressInput
  defaultDeliveryAddress: AddressInput
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  sendPasswordEmail: Boolean
}

type VAT {
  countryCode: String!
  standardRate: Float
  reducedRates: [ReducedRate]!
}

type VariantImageAssign {
  errors: [Error!]
  skillVariant: SkillVariant
  image: SkillImage
}

type VariantImageUnassign {
  errors: [Error!]
  skillVariant: SkillVariant
  image: SkillImage
}

type VerifyToken {
  payload: GenericScalar
  user: User
}

type Voucher implements Node {
  id: ID!
  type: VoucherType!
  name: String
  code: String!
  usageLimit: Int
  used: Int!
  startDate: Date!
  endDate: Date
  applyOncePerTask: Boolean!
  discountValueType: VoucherDiscountValueType!
  discountValue: Float!
  countries: [CountryDisplay]
  minAmountSpent: Money
  skills(before: String, after: String, first: Int, last: Int): SkillCountableConnection
  collections(before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  categories(before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  translation(languageCode: String!): VoucherTranslation
}

type VoucherAddCatalogues {
  errors: [Error!]
  voucher: Voucher
}

type VoucherCountableConnection {
  pageInfo: PageInfo!
  edges: [VoucherCountableEdge!]!
  totalCount: Int
}

type VoucherCountableEdge {
  node: Voucher!
  cursor: String!
}

type VoucherCreate {
  errors: [Error!]
  voucher: Voucher
}

type VoucherDelete {
  errors: [Error!]
  voucher: Voucher
}

enum VoucherDiscountValueType {
  FIXED
  PERCENTAGE
}

input VoucherInput {
  type: VoucherTypeEnum
  name: String
  code: String
  startDate: Date
  endDate: Date
  discountValueType: DiscountValueTypeEnum
  discountValue: Decimal
  skills: [ID]
  collections: [ID]
  categories: [ID]
  minAmountSpent: Decimal
  countries: [String]
}

type VoucherRemoveCatalogues {
  errors: [Error!]
  voucher: Voucher
}

type VoucherTranslate {
  errors: [Error!]
  voucher: Voucher
}

type VoucherTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum VoucherType {
  VALUE
  SKILL
  COLLECTION
  CATEGORY
  DELIVERY
}

enum VoucherTypeEnum {
  SKILL
  COLLECTION
  CATEGORY
  DELIVERY
  VALUE
}

type VoucherUpdate {
  errors: [Error!]
  voucher: Voucher
}

type Weight {
  unit: String!
  value: Float!
}

scalar WeightScalar

enum WeightUnitsEnum {
  kg
  lb
  oz
  g
}
